#!/usr/bin/perl

use lib qw(. lib);

use strict;
use warnings;

use POSIX;
use POSIX qw(setsid);
use File::Pid;
use XML::FeedPP;

use Digest::MD5 qw(md5 md5_hex md5_base64);
use Config::Tiny;
use Getopt::Long;
use DBI;

use Diaspora::Bot::Feed;

our $VERSION = '0.01';

my $daemonName      = "diaspora-rss";
my $dieNow          = 0;
my $sleep           = 300;

my @cfgsearch       = ("$ENV{HOME}/.${daemonName}", "/etc/${daemonName}.conf", "/usr/local/etc/${daemonName}.conf");
my ($db, $config, $cfgfile, $debug, $pod, $user, $passwd, $logfile, $pidfile, $help, $version, $diaspora);

Getopt::Long::Configure( qw(no_ignore_case));
GetOptions (
  "config|c=s" => \$cfgfile,
  "debug|d!"   => \$debug,
  "pod|p=s"    => \$pod,
  "user|u=s"   => \$user,
  "passwd|P=s" => \$passwd,
  "log|l=s"    => \$logfile,
  "pidfile|f=s"=> \$pidfile,
  "database|D=s" => \$db,
  "fetchonly|o!" => \$fetchonly,
  "keepold|k=s"  => \$keepold,
  "help|h|?!"    => \$help,
  "version|v!"   => \$version,
) or &usage;

if($version) {
  print "${daemonName} version ${VERSION}\n";
  exit;  
}

if($help) {
  &usage;
}

if(! $cfgfile ) {
  foreach my $file (@cfgsearch) {
    if( -e $file ) {
      $cfgfile = $file;
      last;
    }
  }
  if(! $cfgfile ) {
    print STDERR "No config file found in @cfgsearch!\n";
    exit 1;
  }
}

if(! ($config = Config::Tiny->read( $cfgfile ))) {
  print STDERR "Could not open config $cfgfile: $!\n";
  exit 1;
}

$pod     ||= $config->{main}->{pod}; 
$user    ||= $config->{main}->{username}; 
$passwd  ||= $config->{main}->{password};
$pidfile ||= $config->{main}->{pidfile};
$pidfile ||= "/tmp/${daemonName}.pid";
$logfile ||= $config->{main}->{logfile};
$logfile ||= "/tmp/${daemonName}.log";
$db      ||= $config->{main}->{database};

my $dbh = &preparedb( "feeds" );


if(! $debug) {
  chdir '/';
  umask 0;
  close STDIN;
  open STDOUT, ">>${logfile}" or die "Can't write to logfile: $!";
  open STDERR, ">>${logfile}";
  defined( my $pid = fork ) or die "Can't fork: $!";
  exit if $pid;

  # dissociate this process from the controlling terminal that started it and stop being part
  # of whatever process group this process was a part of.
  POSIX::setsid() or die "Can't start a new session.";

  # callback signal handler for signals.
  $SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
  $SIG{PIPE} = 'ignore';
  $SIG{CHLD} = \&wchild; # avoid zombies

  # create pid file in /var/run/
  my $pidfile = File::Pid->new( { file => $pidfile, } );

  $pidfile->write or die "Can't write PID file: $!";
}

sub signalHandler {
  $dieNow = 1;
}

sub wchild {
  my $waitedpid = wait;
  $SIG{CHLD} = \&wchild;
  $waitedpid = 0;
}

sub logEntry {
  my ($logText) = @_;
  my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
  my $dateTime = sprintf "%4d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
  print "$dateTime $logText\n";
}

sub handleFeed {
  my ($item_guid, %feedcache) = @_;
  my @tags    = @{$feedcache{$item_guid}{tags}};
  my @urls    = @{$feedcache{$item_guid}{urls}};
  my $tagstr  = join ' ', map { "#$_" } @tags;
	my $global_guid = md5_hex( $tagstr, $item_guid );

  if(! &itemexists("oldfeeds", $global_guid) ) {
    my $item    = $feedcache{$item_guid}{item};
    logEntry( "NEW ITEM [$urls[0] -> \"".$item->title()."\" tags: $tagstr]" );
    $diaspora->postfeed(tags => [ @tags, 'rss-all'] , aspect => 'public', link => $item->link, title => $item->title, body => $item->description, uri => $urls[0]);
  }
  
	foreach my $url ( @urls ) {
	  &insertitem("feeds", $url, $global_guid);
	}
}


sub usage {
  print STDERR qq(
$0 is a daemon which posts rss feeds to a diaspora account.

Usage: $0 [-vhcdpuPD]

Options:
-h --help                      print this usage text
-v --version                   print the program version
-c <file> | --config=<file>    use config file <file> instead of the default
-u <user> | --user=<user>      use <user> to login to diaspora
-P <pass> | --passwd=<pass>    use <pass> to login to diaspora
-p <pod>  | --pod=<pod>        use <pod> uri as diaspora pod
-d        | --debug            do not fork into background and print logs to stdout
-D <db>   | --database=<db>    use sqlite db <db> file to store feed information
-f <file> | --pidfile=<file>   store PID in the file <file>.
                               (default: /tmp/${daemonName}.pid)
-l <file> | --logfile=<file>   store log messages to <file>.
                               (default: /tmp/${daemonName}.log)
                               
Config file (if not specified via commandline) might be located in one of the
following locations. $0 looks for them in this order:

$ENV{HOME}/.${daemonName}
/etc/${daemonName}.conf
/usr/local/etc/${daemonName}.conf

This is $0 by Oliver. Diaspora-ID: spektrum\@pod.fractal.bz.
Version $VERSION.
);
  exit;
}

$diaspora = Diaspora::Bot::Feed->new(pod => $pod, user => $user, passwd => $passwd);


###############################################################################
### MAIN LOOP
###############################################################################
until( $dieNow ) {
  eval {
    # Reread config every iteration in order to incorporate new feeds and delete removed feeds from cache
    if(! ($config = Config::Tiny->read( $cfgfile ))) {
      logEntry("Diaspora* RSS BOT - failed to re-read the config $cfgfile: $!");
      exit 1;
    }
    logEntry("Diaspora* RSS BOT - STARTED");

    &renametable( "feeds", "oldfeeds" );
    &createtable( "feeds" );

    if( $diaspora ) {
      my %feedcache;
      foreach my $tag ( keys %{$config->{feeds}} ) {
        eval {
          my $url = $config->{feeds}->{$tag};
          my $feed = XML::FeedPP->new( $url );

          foreach my $item ( $feed->get_item() )
          {
            my $item_guid = md5_hex( $item->title(), $item->description() );
            $feedcache{$item_guid}{item} = $item;
            push @{ $feedcache{$item_guid}{tags} }, $tag;
						push @{ $feedcache{$item_guid}{urls} }, $url;
          }
          1;
        }
        or do {
          logEntry( "ERROR: ".$@." -> Processing next item" );
          next;
        }
      }  

      # Iterate all feeds and only post new items
      foreach my $item_guid ( keys %feedcache ) {
        eval {
          handleFeed( $item_guid, %feedcache );
          1;
        }
        or do {
          logEntry( "ERROR: ".$@ );
        }
      }
      $diaspora->logout;

			&mergetable( "oldfeeds", "feeds" );
			&cliptable( "feeds", values %{$config->{feeds}} );
      &droptable( "oldfeeds" );
    }
    logEntry("Diaspora* RSS BOT - STOPPED");  
    1;  # Return true statement
  }
  or do {
    logEntry( "ERROR: ".$@ );
  };

  # Sleep until next update
  sleep( $sleep );
}

sub preparedb {
  my ($table) = @_;
  my $dbh  = DBI->connect("dbi:SQLite:$db") or die "Could not connect to sqlite db $db: $!\n";
  my $sth  = $dbh->prepare( "CREATE TABLE IF NOT EXISTS $table (url varchar(255) NOT NULL, guid varchar(255) NOT NULL);" );
  $sth->execute() or die "Could not create table for sqlite db $db: $!\n";
  return $dbh;
}

sub insertitem {
  my ($table, $url, $guid) = @_;
  my $sth  = $dbh->prepare( "INSERT INTO $table VALUES(?,?);" );
  $sth->execute($url, $guid) or die "Could not insert ($url, $guid) in table $table: $!\n";
}

sub itemexists {
  my ($table, $guid) = @_;
  my $sth  = $dbh->prepare( "SELECT * FROM $table WHERE guid = ?;" );
  $sth->execute($guid) or die "Could not find $guid in table $table: $!\n";
  my $row = $sth->fetchrow_hashref;
  if($row) {
    if(exists $row->{guid}) {
      return 1;
    }
  }
  else {
    return 0;
  }
}

sub createtable {
  my ($table) = @_;
  my $sth  = $dbh->prepare( "CREATE TABLE IF NOT EXISTS $table (url varchar(255) NOT NULL, guid varchar(255) NOT NULL);" );
  $sth->execute() or die "Could not create table for sqlite db $db: $!\n";  
}

sub droptable {
  my ($table) = @_;
  my $sth  = $dbh->prepare( "DROP TABLE $table;" );
  $sth->execute() or die "Could not delete table $table from sqlite db $db: $!\n";
}

sub renametable {
  my ($oldname, $newname) = @_;
  my $sth  = $dbh->prepare( "ALTER TABLE $oldname RENAME TO $newname;" );
  $sth->execute() or die "Could not rename table $oldname to $newname from sqlite db $db: $!\n";
}

sub mergetable {
	my ($old, $new) = @_;
  my $sth  = $dbh->prepare( "INSERT INTO $new SELECT * FROM $old AS old WHERE NOT EXISTS (SELECT * FROM $new AS new WHERE new.url = old.url);" );
  $sth->execute() or die "Could not merge $old with $new: $!\n";
}

sub cliptable {
	my ($table, @urls) = @_;
  my $params = join ',', map { "?" } @urls;
  my $sth  = $dbh->prepare( "DELETE FROM $table WHERE url NOT IN ($params);" );
  $sth->execute(@urls) or die "Could not clip $table: $!\n";
}

