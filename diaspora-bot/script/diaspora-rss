#!/usr/bin/perl

use lib qw(. lib);

use strict;
use warnings;

use POSIX;
use POSIX qw(setsid);
use File::Pid;
use Config::Tiny;
use Getopt::Long;
use Diaspora::RSSBot;
use utf8;

our $VERSION = '0.10';

my $daemon  = "diaspora-rss";
my $quit    = 0;

my @cfgsearch       = ("$ENV{HOME}/.$daemon", "/etc/$daemon.conf", "/usr/local/etc/$daemon.conf");
my ($db, $config, $cfgfile, $debug, $pod, $user, $passwd, $logfile, $pidfile, $help, $version, $diaspora, $keepold, $failcount, $fetch, $request );

Getopt::Long::Configure( qw(no_ignore_case));
GetOptions (
  "config|c=s"    => \$cfgfile,
  "debug|d!"      => \$debug,
  "pod|p=s"       => \$pod,
  "user|u=s"      => \$user,
  "passwd|P=s"    => \$passwd,
  "log|l=s"       => \$logfile,
  "pidfile|f=s"   => \$pidfile,
  "database|D=s"  => \$db,
  "keepold|k=s"   => \$keepold,
  "failcount|F=s" => \$failcount,
  "fetch|e=s"     => \$fetch,
  "request|r=s"   => \$request,
  "help|h|?!"     => \$help,
  "version|v!"    => \$version,
) or &usage;

if( $version )
{
  print "$daemon version ${VERSION}\n";
  exit;
}

if( $help )
{
  &usage;
}

if( !$cfgfile )
{
  foreach my $file ( @cfgsearch )
  {
    if( -e $file )
    {
      $cfgfile = $file;
      last;
    }
  }
  if( !$cfgfile )
  {
    print STDERR "No config file found in @cfgsearch!\n";
    exit 1;
  }
}

if( !($config = Config::Tiny->read( $cfgfile )) )
{
  print STDERR "Could not open config $cfgfile: $!\n";
  exit 1;
}

$pod        ||= $config->{main}->{pod};
$user       ||= $config->{main}->{username};
$passwd     ||= $config->{main}->{password};
$pidfile    ||= $config->{main}->{pidfile};
$pidfile    ||= "/var/run/$daemon.pid";
$logfile    ||= $config->{main}->{logfile};
$logfile    ||= "/tmp/$daemon.log";
$db         ||= $config->{main}->{database};
$keepold    ||= $config->{main}->{keepold};
$keepold    ||= 30;
$failcount  ||= $config->{main}->{failcount};
$failcount  ||= 50;
$fetch      ||= $config->{main}->{fetch};
$fetch      ||= 300;
$request    ||= $config->{main}->{request};
$request    ||= 60;


if( !$debug )
{
  chdir '/';
  umask 0;
  close STDIN;
  open STDOUT, ">>${logfile}" or die "Can't write to logfile: $!";
  open STDERR, ">>${logfile}";
  defined( my $pid = fork ) or die "Can't fork: $!";
  exit if $pid;

  # dissociate this process from the controlling terminal that started it and stop being part
  # of whatever process group this process was a part of.
  POSIX::setsid() or die "Can't start a new session.";

  # callback signal handler for signals.
  $SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
  $SIG{PIPE} = 'ignore';
  $SIG{CHLD} = \&wchild; # avoid zombies

  # create pid file in /var/run/
  my $pidfile = File::Pid->new( { file => $pidfile, } );

  $pidfile->write or die "Can't write PID file: $!";
}

sub signalHandler
{
  $quit = 1;
}

sub wchild
{
  my $waitedpid = wait;
  $SIG{CHLD} = \&wchild;
  $waitedpid = 0;
}

sub printlog
{
  my ($logText) = @_;
  my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
  my $dateTime = sprintf "%4d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
  print "$dateTime $logText\n";
}

sub usage
{
  print STDERR qq(
$0 is a daemon which posts rss feeds to a diaspora account.

Usage: $0 [-vhcdpuPD]

Options:
-h --help                           print this usage text
-v --version                        print the program version
-c <file>     | --config=<file>     use config file <file> instead of the default
-u <user>     | --user=<user>       use <user> to login to diaspora
-P <pass>     | --passwd=<pass>     use <pass> to login to diaspora
-p <pod>      | --pod=<pod>         use <pod> uri as diaspora pod
-d            | --debug             do not fork into background and print logs to stdout
-D <db>       | --database=<db>     use sqlite db <db> file to store feed information
-f <file>     | --pidfile=<file>    store PID in the file <file>.
                                    (default: /tmp/$daemon.pid)
-l <file>     | --logfile=<file>    store log messages to <file>.
                                    (default: /tmp/$daemon.log)
-k <days>     | --keepold=<days>    how many days to remember old entries.
-F <limit>    | --failcount=<limit> number of subsequent fails when tryinf to fetch a feed. If the limit is reached, the feed is purged from the system.
-e <seconds>  | --fetch=<seconds>   number of seconds the bot at least waits between subsequent feed fetches.
-r <seconds>  | --request=<seconds> number of seconds the bot at least waits between processing of user requests.


Config file (if not specified via commandline) might be located in one of the
following locations. $0 looks for them in this order:

$ENV{HOME}/.$daemon
/etc/$daemon.conf
/usr/local/etc/$daemon.conf

This is $0 by Oliver. Diaspora-ID: spektrum\@pod.fractal.bz.
Version $VERSION.
);
  exit;
}

my $rssbot = Diaspora::RSSBot->new( pod => $pod, user => $user, passwd => $passwd, db_path => $db, failcount => $failcount );
my $lastfetch = time - $fetch - 1;  # Subsctract sleeptime - 1 to trigger a fetch immediately after the script was started

###############################################################################
### MAIN LOOP
###############################################################################
until( $quit )
{
  eval
  {
    printlog( "Diaspora* RSS BOT - STARTED" );

    if( $rssbot )
    { 
      $rssbot->login();
      printlog( "Processing requests" );
      $rssbot->process_requests();

      if( (time - $lastfetch) > $fetch )
      {
        printlog( "Fetching feeds" );
        $rssbot->process_feeds();
        $rssbot->purge_feeds( $keepold );
        $lastfetch = time;
      }
      $rssbot->logout();
    }
    1;  # Return true statement
  }
  or do
  {
    printlog( "ERROR: ".$@ );
  };
  printlog("Diaspora* RSS BOT - STOPPED");  

  # Sleep until next update
  sleep( $request );  # Sleep a minute
}

